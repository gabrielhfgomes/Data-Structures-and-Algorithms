

Stack Array-Based e SinglyLinkedList-Based:
    - push: O(1)
    - pop:  O(1)

Queue Array-Based com estratégia do f e SinglyLinkedList:
    - enqueue: O(1)
    - dequeue: O(1)

Deque:
    - addFirst:    O(1)
    - addLast:    O(1)
    - removeFirst: O(1)
    - removeLast:  O(1)

ArrayList:
    - add:      O(n)
    - set:      O(1)
    - remove:   O(n)
    - get:      O(1)

PositionalList:
    - addFirst, addLast, addBefore, addAfter: O(1)
    - set:                                    O(1)
    - remove:                                 O(1)

LinkedBinaryTree:
    - todos métodos: O(1)   
    - depth: O(dp + 1) dp = depth do parent
    - height: O(n)

UnsortedPriorityQueue implementada com LinkedPositionalList:
    - insert: O(1)
    - removeMin, min: O(n)

SortedPriorityQueue implementada com LinkedPositionalList:
    - insert: O(n)
    - remove, min: O(1)

Selection Sort com PriorityQueue ou PqSort
    - O(n2)

HeapPriorityQueue
    - insert: O(log n)
    - remove: O(log n)
    - min: O(1)

UnsortedTableMap
    - put: O(1)
    - get: O(n)
    - remove: O(n)

SortedTableMap
    - put:   O(n)/O(log n)
    - get:   O(log n)
    - remove:O(n)

HashTables:
            Esperado:   Pior caso:
- get:        O(1)         O(n)
- put:        O(1)         O(n)
- remove:     O(1)         O(n)

Skip Lists:
              Esperado:
    - search: O(log n)
    - update: O(log n)
    - remove: O(log n)
