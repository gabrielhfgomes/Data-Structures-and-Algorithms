R-8.24 Dê a saída do método parenthesize(T, T.root()), conforme descrito no Fragmento de Código 8.26, quando T é a árvore da Figura 8.6.

Não é possível reconstruir uma árvore geral, dada apenas a sequência de pré-ordenação de elementos, como na Figura 8.18a.
Algum contexto adicional é necessário para que a estrutura da árvore seja bem definida.
O uso de indentação ou rótulos numerados fornece esse contexto, com uma apresentação muito amigável.
No entanto, há mais representações de cordas concisas de árvores que são amigáveis ​​para o computador.
Nesta seção, exploramos uma dessas representações. A representação de cadeia parental P (T) da árvore T é definida recursivamente.
Se T consiste de uma única posição p, então P (T) = p.getElement (). Caso contrário, é definido recursivamente como,

onde p é a raiz de T e T1, T2, ..., Tk são as subveres enraizadas nos filhos de p,
que são dadas para se T é uma árvore ordenada. Estamos usando "+" aqui para denotar concatenação de string.
Como exemplo, a representação parentética da árvore da Figura 8.2 apareceria da seguinte forma (as quebras de linha são cosméticas):

Embora a representação parentética seja essencialmente um percurso de pré-ordenação,
não podemos produzir facilmente a pontuação adicional usando a implementação formal de pré-ordenação.
Os parênteses de abertura devem ser produzidos logo antes do loop sobre os filhos de uma posição,
as vírgulas de separação entre crianças e os parênteses de fechamento logo após o término do loop.
O método Java parêntese, mostrado no Fragmento de Código 8.26, é um percurso personalizado que imprime uma representação
de string semelhante a uma árvore T.

/∗∗ Prints parenthesized representation of subtree of T rooted at p. ∗/
public static <E> void parenthesize(Tree<E> T, Position<E> p) {
    System.out.print(p.getElement( ));
    if (T.isInternal(p)) {
        boolean firstTime = true;
        for (Position<E> c : T.children(p)) {
            System.out.print( (firstTime ? " (" : ", ") ); // determine proper punctuation
            firstTime = false; // any future passes will get comma
            parenthesize(T, c); // recur on child
        }
        System.out.print(")");
    }
}

- (/ (* (+ (3, 1), 3), + (- (9, 5), 2)), + (* (3, -(7, 4)), 6))